-> Kubernetes is a cluster and orchestration engine for containers.
-> In other words Kubernetes is  an open source software or tool which is used to orchestrate and manage docker containers in cluster environment.
-> Kubernetes is also known as k8s and it was developed by Google and donated to “Cloud Native Computing foundation”.
-> In Kubernetes setup we have one master node and multiple nodes.
-> Cluster nodes is known as worker node or Minion.
-> From the master node we manage the cluster and its nodes using ‘kubeadm‘ and ‘kubectl‘  command.


Kubernetes can be installed and deployed using following methods:

  Minikube ( It is a single node kubernetes cluster)
  Kops ( Multi node kubernetes setup into AWS )
  Kubeadm ( Multi Node Cluster in our own premises)
  
On the Master Node following components will be installed:

  kube-apiserver: Use for front end for Kubernetes the users,management devices,CLI,interact with api-server to talk with kubernetes cluster.
                  It provides kubernetes API using Jason / Yaml over http, states of API objects are stored in etcd.
  etcd: distributed reliable key-value store, kubernetes stores all the data in etcd to manage the cluster.(masters and nodes info)
        It's available all the nodes in the cluster.  
        It is a Key value pair data base. It stores configuration data of cluster and cluster state.
  kube-scheduler: distribute the work to the multiple containers which are there in across the cluster.
                  It is a program on master node which performs the scheduling tasks like launching containers in worker nodes based on resource availability.
  kube-controller-manager: is responsible to identify if there is any failures in the node or containers so that it can able to replace with the new container or node.
                           Main Job of Controller manager is to monitor replication controllers and create pods to maintain desired state.
  Kubectl utility: It is a command line utility which connects to API Server on port 6443. It is used by administrators to create pods, services etc.
                   interact with our cluster to manage.
  cloud-controller-manager: it is useful if you are hosting kubernetes in the cloud. so it can able to talk underlaying cloud provider to manage your nodes. 

On Worker Nodes following components will be installed:

  kubelet: kubelet is service which will run on entire cluster it will make sure that all the containers up and running.
           It is an agent which runs on every worker node, it connects to docker and takes care of creating, starting, deleting containers.
  kube-proxy: It is works at network level which will be forwording network connections.
              It routes the traffic to appropriate containers based on ip address and port number of the incoming request. 
              In other words we can say it is used for port translation.
  container Runtime: container Runtime is underlaying software which is used to run our container.
  
  
  Pod: Pod can be defined as a multi-tier or group of containers that are deployed on a single worker node or docker host.
  
    pod - create & Display:
    #nginx-pod.yaml
    ---
    apiVersion: v1
    kind: Pod
    metadata:
      name: nginx-pod
      labels:
        app: nginx
        tier: dev
    spec:
      containers:
      - name: nginx-container
        image: nginx
        
  #kubectl create -f nginx-pod.yaml --> To create new pod using yml file.
#kubectl get pod --> List of all pods info.
#kubectl get pod <pod name> --> list of particular pod info.
#kubectl get pod -o wide --> To find ip address of pod the node which this pod is running we need to print wide output. 
#kubectl describe pod nginx-pod --> Display all details and events of pod.This cmd vert handy during troubleshooting.

##########################################################################
Deployments in Kubernetes:
    -> Deployment is a Controller just like any other Controller such as Replication Controller.
    -> Deployment is all about updates & Rollback, so Deployment Controller provides declarative updates is for pods and Replication Controller.
    
      #nginx-deploy.yaml
    ---
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: nginx-deployment
      labels:
        app: nginx-app
    spec:
      replicas: 3
      selector:
        matchLabels:
          app: nginx-app
      template:
        metadata: 
          labels:
            app: nginx-app
        spec:
          containers:
          - name: nginx-container
            image: nginx:1.7.9
            ports:
            - containerPort: 80
...

   #kubectl create -f nginx-deploy.yaml --> Create and display
   
##############################################################################

Services in Kubernetes: 
   -> Imagine that, you have been asked to deploy web app.
      Typically the setup consists of front end web app and backend database.
      
 Types of services:
   Cluster IP: is reacheable only with in the cluster. some of the use cases are to connect front end pods to back end pods with in the cluster.
   Node port: There are other set of pods that you need to expose out side world, where you want to expose web app to out side world on the internet.
   Load balancer: Let's say your fronend app instances distributed across nodes inside your kubernetes cluster 
   
 Load Balancing Service in Kubernetes: 
   -> once you create service type load balancer it will automatically create the load balancer in the backend and genarate public ip address for you.
   -> which will use the public address which will forward all the traffic to a service, and you can send httpd,tcp,udp all diff kind of traffic.

  selector: The purpose of selector is to define the way service select the pods that it's need to manage.

  1. we need to create deployment:
    #nginx-deploy.yaml
    ---
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: nginx-deployment
      labels:
        app: nginx-app
    spec:
      replicas: 1
      selector:
        matchLabels:
          app: nginx-app
      template:
        metadata: 
          labels:
            app: nginx-app
        spec:
          containers:
          - name: nginx-container
            image: nginx:1.7.9
            ports:
            - containerPort: 80
      ... 

  #kubectl create -f nginx-deploy.yaml --> Need to create deployment 

   #service - loadbalancer
   #nginx-svc-lb.yaml
  ---
  apiVersion: v1
  kind: Service
  metadata:
    name: my-service
    labels:
      app: nginx-app
  spec:
    selector:
      app: nginx-app
    type: LoadBalancer
    ports:
    - nodePort: 31000
      port: 80
      targetPort: 80
...


  #kubectl create -f nginx-svc-lb.yaml --> Expose the app to outside world for that we need a service
  #kubectl get service -l app=nginx-app --> To display the service
  #kubectl describe service my-service --> To print the complete details about the service. 
  #kubectl describe service my-service |grep Load --> Accessing using LoadBalancer IP.
  #kubectl delete service my-service --> Deleting LB service (pods will deleted automatically).
