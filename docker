Docker is a tool designed to make it easier to create, deploy, and run applications by using containers.

docker image: A Docker Image is the template (application plus required binaries and libraries) 
              needed to build a running Docker Container (the running instance of that image).
              Image is a file which describe how the container should behave.Its like a template of the container.
			  Docker image is package,Template,Plan. It is used to create one or more container's

docker Container: Container is the working copy.
                  Container's are running instances of images, isolated,and own env and set of process.
                  
 #docker pull ubuntu --> it will automatically pull it from Docker Hub.
 
 #docker exec -it [container-id] bash --> how to enter docker container exit one.
 
 ########################## Docker File ######################################
-> Docker file is the test file or script which contains keywords and set of linux commands which are executed automatically whenever we 
build the docker images or A Dockerfile is a text configuration file written in a popular, human-readable Markup Language called YAML.
-> Docker file is defination of docker image.

Command	Description: 

ADD: 	    Copies a file from the host system onto the container
CMD: 	    The command that runs when the container starts (Used for executing commands when we build a new container from the docker image)
ENTRYPOINT:  Define the default command that will be executed when the container is running.
ENV: 	    Sets an environment variable in the new container
EXPOSE:	    Opens a port for linked containers
FROM:	    The base image to use in the build. This is mandatory and must be the first command in the file.
MAINTAINER:	An optional value for the maintainer of the script
ONBUILD:    A command that is triggered when the image in the Docker file is used as a base for another image.
RUN: 	    Executes a command and save the result as a new layer(Used to execute a command during the build process of the docker image.)
USER:	    Sets the default user within the container (Set the user or UID for the container created with the image)
VOLUME:	    Creates a shared volume that can be shared among containers or by the host machine(Enable access/linked directory between the container and the host machine.)
WORKDIR:	Set the default working directory for the container(This is directive for CMD command to be executed)
COPY:       Copy files from Docker host to container. 

################# Lab section #############

FROM ubuntu:16.04
RUN apt-get update
RUN apt-get install -y apache2
#RUN apt-get install â€“y apache2-utils
RUN apt-get clean
EXPOSE 80
CMD ["apache2ctl", "-D", "FOREGROUND"]

#docker build -t webserver_img .

###########################

FROM ubuntu:16.04


# Install services, packages and do cleanup
RUN apt-get update \
 && apt-get install -y \
    apache2 \
 && rm -rf /var/lib/apt/lists/*

RUN echo "Website is hosted inside a container" > /var/www/html/index.html
# Expose Apache
EXPOSE 80

# Launch Apache
CMD ["/usr/sbin/apache2ctl", "-DFOREGROUND"]

##################### create docker volumes ######################

How a Volume Can Help ?
                    A volume allows data to persist, even when a container is deleted.
					Volumes are also a convenient way to share data between the host and the container.
          
Mounting a volume is a good solution if you want to:
                    Push data to a container.
                    Pull data from a container.
                    Share data between containers
                    

# docker volume create --name DataVolume1 --> Create a volume

#docker run -ti --rm -v [volume name]:[container directory]  ubuntu:16.04 --> using the --rm flag to automatically delete it when we exit

##########################  Docker Network  ##############################################

Docker takes care of the networking aspects so that the containers can communicate with other containers and also with the Docker Host.

Docker's Default Networks:
                         Each Docker installation automatically builds three default networks.
                         #docker network ls --> List of all docker networks
                         The bridge network is the default network.
                         
Docker Networking: Bridge vs Overlay:
                   Docker natively supports two types of networks: bridge and overlay.
                   
Creating a New Bridge Network:
        #docker network create -d [driver] [new network name]
		The -d flag lets you specify the driver for the network. For a bridge network, use the bridge driver.
    
Starting a Container and Adding it to a Network:
        If you do not specify a network when you start up a container, it will automatically be added to the default bridge network.
		#docker run -it --net=[network name] --name [container name] [image]
