
Terraform Setup with AWS:
-> Terraform support many cloud providers.
-> So terraform has plugins for each provider and we need to download it before going to work with any cloud with terraform. 
-> you no need to download and install plugins manually terraform will takecare.

-> first we need to create .tf configuration file and pass the provider information.
-> Now run terraform init command and observe the output. This command download the plugin for required provider which we mention terraform file.

#provider.tf
provider "aws" {
  region = "eu-west-1"

}

AWS IAM User creation to work with terrafrom for IAC:
-> create IAM user and assign required permissions for user to manager IAC scripts using terraform.

Simple project creation with terraform:
-> Create main.tf file to declare your required services from AWS cloud for your project setup.
   #terrform fmt --> re-arranged properly 
   #terrform plan --> It won't create any infrasture , it will show what actually it is going to create.
   #terraform apply --> To create resouces 
   #terraform destroy --> existing infra.

   #main.tf
   resource "aws_instance" "web01" {
  ami           = "ami-03ef731cc103c9f09"
  instance_type = "t2.micro"
  security_groups = ["${aws_security_group.allow_ssh.name}"]

  tags={
    Name = "Ec2 instance created by terrform"
  }
}

resource "aws_security_group" "allow_ssh" {
  name        = "allow_ssh"
  description = "Allow ssh traffic"


  ingress {

    from_port   = 22 #  By default, the linux server listens on TCP port 22 for ssh
    to_port     = 22
    protocol =   "tcp"

    cidr_blocks =  ["0.0.0.0/0"]
  }
}

Terraform state file:
-> Terraform records information about what infrastructure it created in a Terraform state file.
-> This file contains a custom JSON format that records a mapping from the Terraform resources in your templates to the representation of those resources in the real world.

terraform-variables:
 #instance.tf
 resource "aws_instance" "example" {
  ami           = "ami-0c64dd618a49aeee8"
  instance_type = var.ec2_type
  count = var.instance_count

tags = {
    Name = "Terraform_demo"
  }
}

#variables.tf
variable "instance_count" {
  # default = 2
}

variable "ec2_type" {
  # default = "t2.micro"
}

#######################################
 interpolation: we can get some dynamic values , "${}" --> we can access the values of other resouces and we can also access the variables.
            -> "${<Type of resouce>.<logicalname>.id}" --> so this particular interpolation get the id of particular resouces.
            -> atrribute is "id"


Terraform variables:

#vpc.tf
resource "aws_vpc" "TF_vpc" {
  cidr_block       = "${var.vpc_cidr}"
  instance_tenancy = "default"

  tags = {
    Name = "TF_vpc"
    Location = "HYD"
  }
}

resource "aws_subnet" "subnet_1" {
  vpc_id     = "${aws_vpc.TF_vpc.id}"
  cidr_block = "${var.subnet_cidr}"

  tags = {
    Name = "TF_vpc"
  }
}


#vars.tf          
variable "region" {
 # type    = "string"
  default = "eu-west-1"
}


variable "vpc_cidr" {
  default = "10.0.0.0/16"
}


variable "subnet_cidr" {
  default = "10.0.0.0/24"
}

Terraform loops: 
  -> Using loops we can create multiple resources dynamically
###########  create multiple subnets dynamically ############

#vars.tf
variable "region" {
 # type    = "string"
  default = "ap-south-1"
}

variable "vpc_cidr" {
  default = "10.0.0.0/16"
}

variable "subnet_cidr" {
  type = "list"
  default = ["10.0.0.0/24","10.0.1.0/24","10.0.2.0/24"]
}

variable "azs" {
  type    = "list"
  default = ["ap-south-1a","ap-south-1b","ap-south-1c"]
}

#vpc.tf
resource "aws_vpc" "TF_vpc" {
  cidr_block       = "${var.vpc_cidr}"
  instance_tenancy = "default"

  tags = {
    Name = "TF_vpc"
    Location = "HYD"
  }
}

resource "aws_subnet" "subnets" {
  count = "${length(var.azs)}"
  vpc_id     = "${aws_vpc.TF_vpc.id}"
  cidr_block = "${element(var.subnet_cidr,count.index)}"

  tags = {
    Name = "subnet-${count.index+1}"
  }
}

